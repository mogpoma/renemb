[
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column Sub using expression grel:if(lastIndexOf(value, \",\") == value.length()-1, substring(value, 0, value.length()-1), value)",
    "engineConfig": {
      "mode": "row-based",
      "facets": []
    },
    "columnName": "Sub",
    "expression": "grel:if(lastIndexOf(value, \",\") == value.length()-1, substring(value, 0, value.length()-1), value)",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column Sub using expression grel:if(lastIndexOf(value, \".\") == value.length()-1, substring(value, 0, value.length()-1), value)",
    "engineConfig": {
      "mode": "row-based",
      "facets": []
    },
    "columnName": "Sub",
    "expression": "grel:if(lastIndexOf(value, \".\") == value.length()-1, substring(value, 0, value.length()-1), value)",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/recon",
    "description": "Reconcile cells in column Sub to type Subjects",
    "columnName": "Sub",
    "config": {
      "mode": "standard-service",
      "service": "http://0.0.0.0:5000",
      "identifierSpace": "null",
      "schemaSpace": "null",
      "type": {
        "id": "Subjects",
        "name": "Subjects"
      },
      "autoMatch": true,
      "columnDetails": []
    },
    "engineConfig": {
      "mode": "row-based",
      "facets": []
    }
  },
  {
    "op": "core/column-addition",
    "description": "Create column score at index 1 based on column Sub using expression grel:forEach(cell.recon.candidates, v, if((v.score >= 90), v.score, '')).join(\";\")",
    "engineConfig": {
      "mode": "row-based",
      "facets": []
    },
    "newColumnName": "score",
    "columnInsertIndex": 1,
    "baseColumnName": "Sub",
    "expression": "grel:forEach(cell.recon.candidates, v, if((v.score >= 90), v.score, '')).join(\";\")",
    "onError": "set-to-blank"
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column score using expression grel:if(isNonBlank(value), value + \";\", value)",
    "engineConfig": {
      "mode": "row-based",
      "facets": []
    },
    "columnName": "score",
    "expression": "grel:if(isNonBlank(value), value + \";\", value)",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column score using expression grel:with(split(value, \";\"), v, if(v[1]==\"\", toNumber(v[0]), max(toNumber(v[0]), toNumber(v[1]))))",
    "engineConfig": {
      "mode": "row-based",
      "facets": []
    },
    "columnName": "score",
    "expression": "grel:with(split(value, \";\"), v, if(v[1]==\"\", toNumber(v[0]), max(toNumber(v[0]), toNumber(v[1]))))",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/column-addition",
    "description": "Create column LCSH at index 1 based on column Sub using expression grel:with(forEach(cell.recon.candidates, v, if(v.score == cells[\"score\"].value, v.id, \"\")).join(\";\"), a, a.split(\";\")[0])",
    "engineConfig": {
      "mode": "row-based",
      "facets": []
    },
    "newColumnName": "LCSH",
    "columnInsertIndex": 1,
    "baseColumnName": "Sub",
    "expression": "grel:with(forEach(cell.recon.candidates, v, if(v.score == cells[\"score\"].value, v.id, \"\")).join(\";\"), a, a.split(\";\")[0])",
    "onError": "set-to-blank"
  }
]
